use lalrpop_util::{ ErrorRecovery };

use std::str::FromStr;
use ast::*;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

match {
  "bool" => BOOL,
  "def" => DEF,
  "else" => ELSE,
  "false" => FALSE,
  "for" => FOR,
  "if" => IF,
  "int" => INT,
  r"(let|var)" => LET,
  "read" => READ,
  "return" => RETURN,
  r"(skip|continue)" => SKIP,
  r"(stop|break)" => STOP,
  "str" => STR,
  "true" => TRUE,
  "while" => WHILE,
  "write" => WRITE,

  "[" => OPEN_BRACKET,
  "]" => CLOSE_BRACKET,
  "(" => OPEN_PARENS,
  ")" => CLOSE_PARENS,
  "{" => OPEN_BRACE,
  "}" => CLOSE_BRACE,

  "," => COMMA,
  ":" => COLON,
  ";" => SEMICOLON,

  "+" => PLUS,
  "-" => MINUS,
  "*" => ASTERISK,
  "/" => SLASH,
  "%" => PERCENT,
  "=" => EQUAL,

  "<" => LESS,
  ">" => GREATER,

  "!" => EXCLAMATION,
  "?" => QUESTION,

  "&" => AMPERSAND,
  "|" => PIPE,
} else {
    _
}

Num: u64 = r"[0-9]+" => u64::from_str(<>).unwrap();
Id: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>);

Var: Variable = {
    <Id> OPEN_BRACKET <Expr> CLOSE_BRACKET => Variable::Array(<>),
    <Id> => Variable::Single(<>),
};

Tier<Op, Next>: Box<Expr> = {
    Tier<Op, Next> Op Next => Box::new(Expr::Op(<>)),
    Next,
};

Comma<T>: Vec<T> = {
    <v:(<T> COMMA)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

SemiColon<T>: Vec<T> = {
    <v:(<T> SEMICOLON)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

Either<T, U>: (Option<T>, Option<U>) = {
    <T> => (Some(<>), None),
    <U> => (None, Some(<>)),
};

Term: Box<Expr> = {
    TRUE => Box::new(Expr::True),
    FALSE => Box::new(Expr::False),
    Num => Box::new(Expr::Number(<>)),
    Var => Box::new(Expr::Variable(<>)),
    <Id> OPEN_PARENS <Comma<Expr>?> CLOSE_PARENS => Box::new(Expr::Call(<>)),
    OPEN_PARENS <Expr> CLOSE_PARENS,
};

NegativeOp: Opcode = MINUS => Opcode::Negative;
Negative: Box<Expr> = {
    NegativeOp Term => Box::new(Expr::Right(<>)),
    Term,
};

NotOp: Opcode = EXCLAMATION => Opcode::Not;
Not: Box<Expr> = {
    NotOp Negative=> Box::new(Expr::Right(<>)),
    Negative,
};

FactorOp: Opcode = {
    ASTERISK => Opcode::Mul,
    SLASH => Opcode::Div,
    PERCENT => Opcode::Mod,
};
Factor = Tier<FactorOp, Not>;

LinearOp: Opcode = {
    PLUS => Opcode::Add,
    MINUS => Opcode::Sub,
};
Linear = Tier<LinearOp, Factor>;

LesserOp: Opcode = {
    LESS EQUAL => Opcode::LesserOrEqual,
    LESS => Opcode::Lesser,
};
Lesser = Tier<LesserOp, Linear>;

GreaterOp: Opcode = {
    GREATER EQUAL => Opcode::GreaterOrEqual,
    GREATER => Opcode::Greater,
};
Greater = Tier<GreaterOp, Lesser>;

EqualityOp: Opcode = {
    EQUAL EQUAL => Opcode::Equal,
    EXCLAMATION EQUAL => Opcode::Different,
};
Equality = Tier<EqualityOp, Greater>;

AndOp: Opcode = AMPERSAND AMPERSAND => Opcode::And;
And = Tier<AndOp, Equality>;

OrOp: Opcode = PIPE PIPE => Opcode::Or;
Or = Tier<OrOp, And>;

Ternary: Box<Expr> = {
    <Or> QUESTION <Or> COLON <Expr> => Box::new(Expr::Ternary(<>)),
    Or,
};

Expr = Ternary;

Type: Type = {
    INT => Type::Int,
    BOOL => Type::Bool,
    STR => Type::Str,
};

VarArrayDecl: (String, u64, Option<Vec<Box<Expr>>>) = {
    // TODO Possible error recovery is when a user insert an expression in place of a number
    <a:Id> OPEN_BRACKET <n:Num> CLOSE_BRACKET EQUAL OPEN_BRACE <f:Comma<Expr>> CLOSE_BRACE => (a, n, Some(f)),
    <a:Id> OPEN_BRACKET <n:Num> CLOSE_BRACKET => (a, n, None),
};

VarSingleDecl: (String, Option<Box<Expr>>) = {
    <i:Id> EQUAL <e:Expr> => (i, Some(e)),
    <Id> => (<>, None),
};

VarDeclList = Comma<Either<VarSingleDecl, VarArrayDecl>>;

VarDecl: Vec<Decl> = {
    LET <d:VarDeclList> COLON <t:Type> SEMICOLON => {
        let mut f = Vec::new();
        for i in d {
            if let Some(j) = i.0 {
                f.push(Decl::Single(j.0, t.clone(), j.1));
            } else if let Some(j) = i.1 {
                f.push(Decl::Array(j.0, t.clone(), j.1, j.2));
            }
        }
        f
    },
};

ParamArrayDecl: String = {
    <Id> OPEN_BRACKET CLOSE_BRACKET => <>,
};

ParamSingleDecl: String = {
    <Id> => <>,
};

ParamDeclList = Comma<Either<ParamSingleDecl, ParamArrayDecl>>;

FuncDecl: Decl = DEF <i:Id> OPEN_PARENS <p:SemiColon<(<ParamDeclList> COLON <Type>)>?> CLOSE_PARENS <t:(COLON <Type>)?> <b:Block> => {
    // TODO Register the location of function declaration to show to the user in case of redeclaration
    let mut parameters_vector = Vec::new();
    if let Some(parameter_list) = p {
        for parameter in parameter_list {
            // parameter is an tuple of (list, type)
            let declaration_list = parameter.0;
            let type_of = parameter.1;
            for declaration in declaration_list {
                // !! The declaration is a parser Either not an AST::Either
                if let Some(identifier) = declaration.0 { // If either is fullfiled in the left is a single variable
                    parameters_vector.push(FuncParam::Single(identifier, type_of.clone()));
                } else if let Some(identifier) = declaration.1 { // Else if is fullfiled in the right side is an array
                    parameters_vector.push(FuncParam::Array(identifier, type_of.clone()));
                }
            }
        }
        // i -> identifier
        // t -> function return type, could be None, when it's a procedure
        // parameter_list -- Could be None, when it does not have any parameter
        // b -> function block
        Decl::Func(i, t, Some(parameters_vector), b) // When have parameters
    } else {
        Decl::Func(i, t, None, b) // When does not have parameter
    }
};

Decl: Vec<Decl> = {
    VarDecl => <>,
    FuncDecl => vec![<>],
};

Attr<O>: (Variable, Box<Expr>)  = {
    <v:Var> <o:O> <e:Expr> => (v.clone(), Box::new(Expr::Op(Box::new(Expr::Variable(v)), o, e))),
};

AddEqual: Opcode = PLUS EQUAL => Opcode::Add;
SubEqual: Opcode = MINUS EQUAL => Opcode::Sub;
MulEqual: Opcode = ASTERISK EQUAL => Opcode::Mul;
DivEqual: Opcode = SLASH EQUAL => Opcode::Div;
ModEqual: Opcode = PERCENT EQUAL => Opcode::Mod;

AllAttr: Stmt = {
    <v:Var> EQUAL <e:Expr> => Stmt::Attr(v, e),
    <v:Var> PLUS PLUS => Stmt::Attr(
        v.clone(),
        Box::new(
            Expr::Op(
                Box::new(Expr::Variable(v)),
                Opcode::Add,
                Box::new(Expr::Number(1))
            )
        )
    ),
    <v:Var> MINUS MINUS => Stmt::Attr(
        v.clone(),
        Box::new(
            Expr::Op(
                Box::new(Expr::Variable(v)),
                Opcode::Sub,
                Box::new(Expr::Number(1))
            )
        )
    ),
    <a:Attr<AddEqual>> => Stmt::Attr(a.0, a.1),
    <a:Attr<SubEqual>> => Stmt::Attr(a.0, a.1),
    <a:Attr<MulEqual>> => Stmt::Attr(a.0, a.1),
    <a:Attr<DivEqual>> => Stmt::Attr(a.0, a.1),
    <a:Attr<ModEqual>> => Stmt::Attr(a.0, a.1),
};

Stmt: Stmt = {
    <AllAttr> SEMICOLON => <>,

    SKIP SEMICOLON => Stmt::Skip,
    STOP SEMICOLON => Stmt::Stop,
    RETURN <Expr?> SEMICOLON => Stmt::Return(<>),

    READ <v:Var> SEMICOLON => Stmt::Read(<>),
    WRITE <Comma<Expr>> SEMICOLON => Stmt::Write(<>),

    // FIXME Function call is an expression not an statement
    <Id> OPEN_PARENS <Comma<Expr>?> CLOSE_PARENS SEMICOLON => Stmt::Call(<>),

    IF OPEN_PARENS <Expr> CLOSE_PARENS <Block> <(ELSE IF OPEN_PARENS <Expr> CLOSE_PARENS <Block>)*> <(ELSE <Block>)?> => Stmt::If(<>),

    WHILE OPEN_PARENS <Expr> CLOSE_PARENS <Block> => Stmt::While(<>),
    // TODO If for does not accpet an a empty initialization or step recovery from error and print to user
    FOR OPEN_PARENS <i:AllAttr> SEMICOLON <e:Expr> SEMICOLON <s:AllAttr> CLOSE_PARENS <b:Block> => Stmt::For(Box::new(i), e, Box::new(s), b),
};

Commands: Either<Stmt, Block> = {
    <Stmt> => Either::Left(<>),
    <Block> => Either::Right(<>),
};

Block: Block = OPEN_BRACE <d:Decl*> <c:Commands*> CLOSE_BRACE => {
    flatten!(d);
    Block::new(d, c)
};

pub Program: Vec<Decl> = <d:Decl+> => {
    flatten!(d);
    d
};
